"""autogenerated by genpy from mesh_map/Triangulation.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mesh_map.msg

class Triangulation(genpy.Message):
  _md5sum = "b189e15305ff1c86d99e101f793d861a"
  _type = "mesh_map/Triangulation"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Triangle[] Triangulation_Triangles
int64 Triangulation_Triangles_Size
================================================================================
MSG: mesh_map/Triangle
geometry_msgs/Point[3] Triangle_Vertices
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['Triangulation_Triangles','Triangulation_Triangles_Size']
  _slot_types = ['mesh_map/Triangle[]','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Triangulation_Triangles,Triangulation_Triangles_Size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Triangulation, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Triangulation_Triangles is None:
        self.Triangulation_Triangles = []
      if self.Triangulation_Triangles_Size is None:
        self.Triangulation_Triangles_Size = 0
    else:
      self.Triangulation_Triangles = []
      self.Triangulation_Triangles_Size = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.Triangulation_Triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.Triangulation_Triangles:
        for val2 in val1.Triangle_Vertices:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_q.pack(self.Triangulation_Triangles_Size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Triangulation_Triangles is None:
        self.Triangulation_Triangles = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Triangulation_Triangles = []
      for i in range(0, length):
        val1 = mesh_map.msg.Triangle()
        val1.Triangle_Vertices = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.Triangle_Vertices.append(val2)
        self.Triangulation_Triangles.append(val1)
      start = end
      end += 8
      (self.Triangulation_Triangles_Size,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.Triangulation_Triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.Triangulation_Triangles:
        for val2 in val1.Triangle_Vertices:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_q.pack(self.Triangulation_Triangles_Size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Triangulation_Triangles is None:
        self.Triangulation_Triangles = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Triangulation_Triangles = []
      for i in range(0, length):
        val1 = mesh_map.msg.Triangle()
        val1.Triangle_Vertices = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.Triangle_Vertices.append(val2)
        self.Triangulation_Triangles.append(val1)
      start = end
      end += 8
      (self.Triangulation_Triangles_Size,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
_struct_3d = struct.Struct("<3d")
