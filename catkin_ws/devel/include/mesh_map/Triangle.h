// Generated by gencpp from file mesh_map/Triangle.msg
// DO NOT EDIT!


#ifndef MESH_MAP_MESSAGE_TRIANGLE_H
#define MESH_MAP_MESSAGE_TRIANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace mesh_map
{
template <class ContainerAllocator>
struct Triangle_
{
  typedef Triangle_<ContainerAllocator> Type;

  Triangle_()
    : Triangle_Vertices()  {
    }
  Triangle_(const ContainerAllocator& _alloc)
    : Triangle_Vertices()  {
      Triangle_Vertices.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 3>  _Triangle_Vertices_type;
  _Triangle_Vertices_type Triangle_Vertices;




  typedef boost::shared_ptr< ::mesh_map::Triangle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mesh_map::Triangle_<ContainerAllocator> const> ConstPtr;

}; // struct Triangle_

typedef ::mesh_map::Triangle_<std::allocator<void> > Triangle;

typedef boost::shared_ptr< ::mesh_map::Triangle > TrianglePtr;
typedef boost::shared_ptr< ::mesh_map::Triangle const> TriangleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mesh_map::Triangle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mesh_map::Triangle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mesh_map

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mesh_map': ['/home/mrsl_student/git/catkin_ws/src/mesh_map/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mesh_map::Triangle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mesh_map::Triangle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mesh_map::Triangle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mesh_map::Triangle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mesh_map::Triangle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mesh_map::Triangle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mesh_map::Triangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25cdd87d1562bec196e1f54f80b6b393";
  }

  static const char* value(const ::mesh_map::Triangle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25cdd87d1562bec1ULL;
  static const uint64_t static_value2 = 0x96e1f54f80b6b393ULL;
};

template<class ContainerAllocator>
struct DataType< ::mesh_map::Triangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mesh_map/Triangle";
  }

  static const char* value(const ::mesh_map::Triangle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mesh_map::Triangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[3] Triangle_Vertices\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::mesh_map::Triangle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mesh_map::Triangle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Triangle_Vertices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Triangle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mesh_map::Triangle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mesh_map::Triangle_<ContainerAllocator>& v)
  {
    s << indent << "Triangle_Vertices[]" << std::endl;
    for (size_t i = 0; i < v.Triangle_Vertices.size(); ++i)
    {
      s << indent << "  Triangle_Vertices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.Triangle_Vertices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESH_MAP_MESSAGE_TRIANGLE_H
