// Generated by gencpp from file mesh_map/Triangulation.msg
// DO NOT EDIT!


#ifndef MESH_MAP_MESSAGE_TRIANGULATION_H
#define MESH_MAP_MESSAGE_TRIANGULATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mesh_map/Triangle.h>

namespace mesh_map
{
template <class ContainerAllocator>
struct Triangulation_
{
  typedef Triangulation_<ContainerAllocator> Type;

  Triangulation_()
    : Triangulation_Triangles()
    , Triangulation_Triangles_Size(0)  {
    }
  Triangulation_(const ContainerAllocator& _alloc)
    : Triangulation_Triangles(_alloc)
    , Triangulation_Triangles_Size(0)  {
    }



   typedef std::vector< ::mesh_map::Triangle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mesh_map::Triangle_<ContainerAllocator> >::other >  _Triangulation_Triangles_type;
  _Triangulation_Triangles_type Triangulation_Triangles;

   typedef int64_t _Triangulation_Triangles_Size_type;
  _Triangulation_Triangles_Size_type Triangulation_Triangles_Size;




  typedef boost::shared_ptr< ::mesh_map::Triangulation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mesh_map::Triangulation_<ContainerAllocator> const> ConstPtr;

}; // struct Triangulation_

typedef ::mesh_map::Triangulation_<std::allocator<void> > Triangulation;

typedef boost::shared_ptr< ::mesh_map::Triangulation > TriangulationPtr;
typedef boost::shared_ptr< ::mesh_map::Triangulation const> TriangulationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mesh_map::Triangulation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mesh_map::Triangulation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mesh_map

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mesh_map': ['/home/mrsl_student/git/catkin_ws/src/mesh_map/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mesh_map::Triangulation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mesh_map::Triangulation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mesh_map::Triangulation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mesh_map::Triangulation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mesh_map::Triangulation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mesh_map::Triangulation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mesh_map::Triangulation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b189e15305ff1c86d99e101f793d861a";
  }

  static const char* value(const ::mesh_map::Triangulation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb189e15305ff1c86ULL;
  static const uint64_t static_value2 = 0xd99e101f793d861aULL;
};

template<class ContainerAllocator>
struct DataType< ::mesh_map::Triangulation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mesh_map/Triangulation";
  }

  static const char* value(const ::mesh_map::Triangulation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mesh_map::Triangulation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Triangle[] Triangulation_Triangles\n\
int64 Triangulation_Triangles_Size\n\
================================================================================\n\
MSG: mesh_map/Triangle\n\
geometry_msgs/Point[3] Triangle_Vertices\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::mesh_map::Triangulation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mesh_map::Triangulation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Triangulation_Triangles);
      stream.next(m.Triangulation_Triangles_Size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Triangulation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mesh_map::Triangulation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mesh_map::Triangulation_<ContainerAllocator>& v)
  {
    s << indent << "Triangulation_Triangles[]" << std::endl;
    for (size_t i = 0; i < v.Triangulation_Triangles.size(); ++i)
    {
      s << indent << "  Triangulation_Triangles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mesh_map::Triangle_<ContainerAllocator> >::stream(s, indent + "    ", v.Triangulation_Triangles[i]);
    }
    s << indent << "Triangulation_Triangles_Size: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Triangulation_Triangles_Size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESH_MAP_MESSAGE_TRIANGULATION_H
